#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, int M, std::vector<int64_t> &A, std::vector<int64_t> &B)
{
    sort(ALL(A));
    sort(ALL(B));
    vector<int> prices;
    set_union(ALL(A), ALL(B), back_inserter(prices));
    for (auto price : prices)
    {
        if (price > B.back())
        {
            return B.back() + 1;
        }
        int seller_count = upper_bound(ALL(A), price) - A.begin();
        int buyer_count = B.end() - lower_bound(ALL(B), price);
        if (buyer_count <= seller_count)
        {
            return price;
        }
    }
    return B.back() + 1;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, M;
    std::cin >> N;
    std::vector<int64_t> A(N);
    std::cin >> M;
    std::vector<int64_t> B(M);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    REP(i, M)
    {
        std::cin >> B[i];
    }
    auto ans = solve(N, M, A, B);
    std::cout << ans << '\n';
    return 0;
}
