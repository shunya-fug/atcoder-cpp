#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <atcoder/segtree.hpp>

using S = int64_t;
S op(S a, S b) { return max(a, b); }
S e() { return 0; }
using segtree = atcoder::segtree<S, op, e>;

int64_t solve(int N, const std::vector<int64_t> &h, const std::vector<int64_t> &a)
{
    // dp[高さ] = その高さまでの美しさの総和の最大値
    segtree dp(N + 1);
    REP(i, N)
    {
        dp.set(h[i], max(dp.get(h[i]), dp.prod(0, h[i]) + a[i]));
    }
    return dp.all_prod();
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> h(N), a(N);
    REP(i, N)
    {
        std::cin >> h[i];
    }
    REP(i, N)
    {
        std::cin >> a[i];
    }
    auto ans = solve(N, h, a);
    std::cout << ans << '\n';
    return 0;
}
