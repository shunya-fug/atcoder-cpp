#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

double dp[310][310][310];
double solve(int N, const std::vector<int64_t> &a)
{
    // dp[寿司残1枚数][寿司残2枚数][寿司残3枚数] = この状態から寿司をすべて無くすのに必要な操作回数の期待値
    memset(dp, -1, sizeof(dp));

    // plate[寿司の個数] = 枚数
    vector<int64_t> plate(4, 0);
    REP(i, N)
    {
        plate[a[i]]++;
    }

    auto rec = [&](auto &self, int64_t i, int64_t j, int64_t k) -> double
    {
        if (dp[i][j][k] >= 0)
        {
            return dp[i][j][k];
        }
        if (i == 0 and j == 0 and k == 0)
        {
            return 0.0;
        }

        double result = 0.0;
        if (i > 0)
        {
            result += self(self, i - 1, j, k) * i;
        }
        if (j > 0)
        {
            result += self(self, i + 1, j - 1, k) * j;
        }
        if (k > 0)
        {
            result += self(self, i, j + 1, k - 1) * k;
        }
        result += N;
        result *= 1.0 / (i + j + k);
        return dp[i][j][k] = result;
    };
    return rec(rec, plate[1], plate[2], plate[3]);
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> a(N);
    REP(i, N)
    {
        std::cin >> a[i];
    }
    auto ans = solve(N, a);
    std::cout << setprecision(10) << ans << '\n';
    return 0;
}
