#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

// https://zenn.dev/kiwamachan/articles/c3b677f95ac1bc
int64_t solve(int N, const std::vector<int64_t> &a)
{
    // スライムの大きさの累積和
    vector<int64_t> running_sum(N + 1);
    REP(i, N)
    {
        running_sum[i + 1] = running_sum[i] + a[i];
    }
    auto sum = [&](int64_t l, int64_t r)
    {
        return running_sum[r] - running_sum[l];
    };

    // dp[left][right] = [left, right)を合体させたときの最小コスト
    vector<vector<int64_t>> dp(N + 1, vector<int64_t>(N + 1, 1e18));
    REP(i, N)
    {
        dp[i][i + 1] = 0;
    }

    REP3(len, 2, dp.size())
    {
        REP(l, dp.size() - len)
        {
            auto r = l + len;

            for (auto mid = l + 1; mid < r; mid++)
            {
                dp[l][r] = min(dp[l][r], dp[l][mid] + dp[mid][r] + sum(l, r));
            }
        }
    }
    return dp[0][N];
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> a(N);
    REP(i, N)
    {
        std::cin >> a[i];
    }
    auto ans = solve(N, a);
    std::cout << ans << '\n';
    return 0;
}
