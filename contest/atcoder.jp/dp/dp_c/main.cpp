#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, const std::vector<int64_t> &a, const std::vector<int64_t> &b, const std::vector<int64_t> &c)
{
    vector<vector<int64_t>> actions = {a, b, c};
    // dp[日数][活動] = 幸福度
    vector<vector<int64_t>> dp(N, vector<int64_t>(3));
    dp.front() = {a.front(), b.front(), c.front()};
    REP(today, N - 1)
    {
        auto tommorrow = today + 1;
        REP(today_action, 3)
        {
            REP(tommorrow_action, 3)
            {
                if (today_action == tommorrow_action)
                {
                    continue;
                }

                dp[tommorrow][tommorrow_action] = max(dp[tommorrow][tommorrow_action], dp[today][today_action] + actions[tommorrow_action][tommorrow]);
            }
        }
    }
    return *ranges::max_element(dp.back());
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> a(N), b(N), c(N);
    REP(i, N)
    {
        std::cin >> a[i] >> b[i] >> c[i];
    }
    auto ans = solve(N, a, b, c);
    std::cout << ans << '\n';
    return 0;
}
