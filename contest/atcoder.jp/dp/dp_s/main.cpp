#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <atcoder/modint.hpp>

using mint = atcoder::modint1000000007;
// https://kanpurin.hatenablog.com/entry/2022/12/16/014741
int64_t solve(std::string K, int64_t D)
{
    // digit[桁数] = その桁の数字
    vector<int> digit(K.size());
    REP(i, digit.size())
    {
        digit[i] = K[i] - '0';
    }

    // dp[上位i桁][までの桁和をDで割った余り][未満フラグ] = 通り数
    vector<vector<vector<mint>>> dp(K.size() + 1, vector<vector<mint>>(D, vector<mint>(2)));
    dp[0][0][0] = 1;
    REP(i, K.size())
    REP(j, D)
    REP(x, 10)
    {
        if (x == digit[i])
        {
            dp[i + 1][(j + x) % D][0] += dp[i][j][0];
        }
        if (x < digit[i])
        {
            dp[i + 1][(j + x) % D][1] += dp[i][j][0];
        }
        dp[i + 1][(j + x) % D][1] += dp[i][j][1];
    }
    return reduce(ALL(dp[K.size()][0])).val() - 1;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::string K;
    int64_t D;
    std::cin >> K >> D;
    auto ans = solve(K, D);
    std::cout << ans << '\n';
    return 0;
}
