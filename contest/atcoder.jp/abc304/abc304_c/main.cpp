#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";
vector<bool> solve(int N, int64_t D, const std::vector<int64_t> &X, const std::vector<int64_t> &Y)
{
    auto calc_distance = [](int64_t x1, int64_t y1, int64_t x2, int64_t y2)
    {
        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
    };

    vector<bool> ans(N);
    queue<int> Q;
    Q.push(0);
    while (!Q.empty())
    {
        auto i = Q.front();
        Q.pop();
        ans[i] = true;
        REP(j, N)
        {
            if (i == j)
            {
                continue;
            }

            if (!ans[j] and calc_distance(X[i], Y[i], X[j], Y[j]) <= D * D)
            {
                ans[j] = true;
                Q.push(j);
            }
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    int64_t D;
    std::cin >> N;
    std::vector<int64_t> X(N), Y(N);
    std::cin >> D;
    REP(i, N)
    {
        std::cin >> X[i] >> Y[i];
    }
    auto ans = solve(N, D, X, Y);
    REP(i, N)
    {
        std::cout << (ans[i] ? YES : NO) << '\n';
    }
    return 0;
}
