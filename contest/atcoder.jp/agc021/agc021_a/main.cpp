#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/lexical_cast.hpp>
#include <boost/range/adaptor/transformed.hpp>
#include <boost/accumulators/statistics/sum.hpp>

int64_t solve(int64_t N)
{
    auto s = boost::lexical_cast<std::string>(N);
    for (auto it = s.begin() + 1; it != s.end(); ++it)
    {
        if (*it != '9')
        {
            *(it - 1) = boost::lexical_cast<char>(boost::lexical_cast<int>(*(it - 1)) - 1);
            std::fill(it, s.end(), '9');
            break;
        }
    }

    int64_t ans = 0;
    for (auto n : s | boost::adaptors::transformed([](char c)
                                                   { return boost::lexical_cast<int64_t>(c); }))
    {
        ans += n;
    }

    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    std::cin >> N;
    auto ans = solve(N);
    std::cout << ans << '\n';
    return 0;
}
