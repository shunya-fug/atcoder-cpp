#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/dynamic_bitset.hpp>
#include <boost/lexical_cast.hpp>

int64_t solve(int64_t K)
{
    vector<int64_t> numbers;
    for (auto i = 1; i < (1 << 10); i++)
    {
        string number = "";
        boost::dynamic_bitset<> bs(10, i);
        // 1の立っているインデックスを走査
        for (boost::dynamic_bitset<>::size_type pos = bs.find_first();
             pos != bs.npos;
             pos = bs.find_next(pos))
        {
            number += '0' + pos;
        }
        ranges::reverse(number);
        numbers.push_back(boost::lexical_cast<int64_t>(number));
    }
    ranges::sort(numbers);
    return numbers[K];
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t K;
    std::cin >> K;
    auto ans = solve(K);
    std::cout << ans << '\n';
    return 0;
}
