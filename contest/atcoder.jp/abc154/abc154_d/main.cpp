#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

double solve(int N, int K, const std::vector<int64_t> &p)
{
    // E[サイコロの目の数] = 期待値
    vector<double> E(1001);
    double dice = 0;
    REP3(i, 1, E.size())
    {
        dice += i;
        E[i] = dice * (1.0 / i);
    }

    // サイコロの目を期待値の累積和に変換
    vector<double> P(p.size() + 1);
    REP(i, p.size())
    {
        P[i + 1] = P[i] + E[p[i]];
    }

    double ans = 0;
    REP(i, N - K + 1)
    {
        ans = max(ans, P[i + K] - P[i]);
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, K;
    std::cin >> N >> K;
    std::vector<int64_t> p(N);
    REP(i, N)
    {
        std::cin >> p[i];
    }
    auto ans = solve(N, K, p);
    std::cout << fixed << setprecision(10) << ans << '\n';
    return 0;
}
