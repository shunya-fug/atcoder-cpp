#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/range/adaptor/transformed.hpp>

std::vector<string> solve(int N, const std::vector<int64_t> &C, const std::vector<std::vector<int64_t>> &A, int64_t X)
{
    vector<vector<int64_t>> P(37, vector<int64_t>());
    REP(i, A.size())
    {
        REP(j, C[i])
        {
            P[A[i][j]].push_back(i);
        }
    }
    int64_t minimum = LONG_MAX;
    for (auto p : P[X])
    {
        minimum = min(minimum, C[p]);
    }
    vector<string> ans;
    for (auto p : P[X])
    {
        if (C[p] == minimum)
        {
            ans.push_back(boost::lexical_cast<string>(p + 1));
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, X;
    std::cin >> N;
    vector<int64_t> C(N);
    vector<vector<int64_t>> A(N, vector<int64_t>());
    REP(i, N)
    {
        std::cin >> C[i];
        REP(j, C[i])
        {
            int64_t a;
            std::cin >> a;
            A[i].push_back(a);
        }
    }
    std::cin >> X;
    auto ans = solve(N, C, A, X);
    cout << ans.size() << '\n';
    cout << boost::algorithm::join(ans, " ") << '\n';
    return 0;
}
