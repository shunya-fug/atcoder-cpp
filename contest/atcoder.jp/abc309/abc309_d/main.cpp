#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N1, int N2, int M, const std::vector<int64_t> &a, const std::vector<int64_t> &b)
{
    vector<vector<int64_t>> G(N1 + N2 + 1);
    REP(i, M)
    {
        G[a[i]].push_back(b[i]);
        G[b[i]].push_back(a[i]);
    }

    vector<int64_t> dist1(G.size(), -1);
    dist1[1] = 0;
    dist1[N1 + N2] = 0;
    auto distN = dist1;

    queue<int64_t> Q;
    Q.push(1);
    while (!Q.empty())
    {
        auto from = Q.front();
        Q.pop();
        for (auto to : G[from])
        {
            if (dist1[to] == -1)
            {
                dist1[to] = dist1[from] + 1;
                Q.push(to);
            }
        }
    }

    Q.push(N1 + N2);
    while (!Q.empty())
    {
        auto from = Q.front();
        Q.pop();
        for (auto to : G[from])
        {
            if (distN[to] == -1)
            {
                distN[to] = distN[from] + 1;
                Q.push(to);
            }
        }
    }

    return *ranges::max_element(dist1) + *ranges::max_element(distN) + 1;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N1, N2, M;
    std::cin >> N1 >> N2 >> M;
    std::vector<int64_t> a(M), b(M);
    REP(i, M)
    {
        std::cin >> a[i] >> b[i];
    }
    auto ans = solve(N1, N2, M, a, b);
    std::cout << ans << '\n';
    return 0;
}
