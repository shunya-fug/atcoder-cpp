#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/algorithm/string/join.hpp>
#include <boost/range/adaptor/transformed.hpp>
#include <boost/lexical_cast.hpp>

int64_t solve(std::string S)
{
    vector<int64_t> a(S.size() + 1, 0);
    REP(i, S.size())
    {
        if (S[i] == '<')
        {
            a[i + 1] = a[i] + 1;
        }
    }
    REP_R(i, S.size())
    {
        if (S[i] == '>')
        {
            a[i] = max(a[i], a[i + 1] + 1);
        }
    }
    return accumulate(ALL(a), 0LL);
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::string S;
    std::cin >> S;
    auto ans = solve(S);
    std::cout << ans << '\n';
    return 0;
}
