#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, std::vector<int64_t> &X, std::vector<int64_t> &Y)
{
    ranges::sort(X);
    ranges::sort(Y);

    auto median = [](const auto vec)
    {
        return vec.size() % 2 == 0
                   ? (vec[vec.size() / 2] + vec[vec.size() / 2 - 1]) / 2
                   : vec[vec.size() / 2];
    };
    int64_t x = median(X),
            y = median(Y),
            ans = 0;
    REP(i, N)
    {
        ans += abs(x - X[i]) + abs(y - Y[i]);
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> X(N), Y(N);
    REP(i, N)
    {
        std::cin >> X[i] >> Y[i];
    }
    auto ans = solve(N, X, Y);
    std::cout << ans << '\n';
    return 0;
}
