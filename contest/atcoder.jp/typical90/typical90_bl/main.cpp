#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

vector<int64_t> solve(int N, int Q, std::vector<int64_t> &A, const std::vector<int64_t> &L, const std::vector<int64_t> &R, const std::vector<int64_t> &V)
{
    vector<int64_t> B(N - 1);
    vector<int64_t> scores(Q + 1);
    REP(i, N - 1)
    {
        B[i] = A[i + 1] - A[i];
        scores[0] += abs(B[i]);
    }

    REP3(i, 1, scores.size())
    {
        scores[i] = scores[i - 1];
        auto b_left_i = L[i - 1] - 2;
        if (b_left_i >= 0)
        {
            scores[i] += abs(B[b_left_i] + V[i - 1]) - abs(B[b_left_i]);
            B[b_left_i] += V[i - 1];
        }
        auto b_right_i = R[i - 1] - 1;
        if (b_right_i < B.size())
        {
            scores[i] += abs(B[b_right_i] - V[i - 1]) - abs(B[b_right_i]);
            B[b_right_i] -= V[i - 1];
        }
    }

    scores.erase(scores.begin());
    return scores;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, Q;
    std::cin >> N;
    std::vector<int64_t> A(N);
    std::cin >> Q;
    std::vector<int64_t> L(Q), R(Q), V(Q);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    REP(i, Q)
    {
        std::cin >> L[i] >> R[i] >> V[i];
    }
    for (auto ans : solve(N, Q, A, L, R, V))
    {
        std::cout << ans << '\n';
    }
    return 0;
}
