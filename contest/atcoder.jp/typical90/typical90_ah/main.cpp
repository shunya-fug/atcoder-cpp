#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, int64_t K, const std::vector<int64_t> &a)
{
    unordered_map<int64_t, int64_t> kinds;
    int64_t right = -1, ans = 1;
    REP(left, N)
    {
        if (right == -1 or right < left)
        {
            kinds.clear();
            kinds[a[left]] = 1;
            right = left;
        }

        while (right + 1 < N and (kinds.contains(a[right + 1]) or (!kinds.contains(a[right + 1]) and kinds.size() + 1 <= K)))
        {
            right++;
            if (kinds.contains(a[right]))
            {
                kinds[a[right]]++;
            }
            else
            {
                kinds[a[right]] = 1;
            }
            ans = max(ans, right - left + 1);
        }

        kinds[a[left]]--;
        if (kinds[a[left]] == 0)
        {
            kinds.erase(a[left]);
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    int64_t K;
    std::cin >> N;
    std::vector<int64_t> a(N);
    std::cin >> K;
    REP(i, N)
    {
        std::cin >> a[i];
    }
    auto ans = solve(N, K, a);
    std::cout << ans << '\n';
    return 0;
}
