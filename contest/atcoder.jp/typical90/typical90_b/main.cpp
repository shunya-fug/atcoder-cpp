#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/dynamic_bitset.hpp>
#include <boost/lexical_cast.hpp>

bool is_correct(boost::dynamic_bitset<> bits)
{
    int state = 0;
    REP(i, bits.size())
    {
        state += bits.test(i) ? 1 : -1;
        if (state < 0)
        {
            return false;
        }
    }
    return true;
}

vector<string> solve(int64_t N)
{
    vector<string> ans;
    if (N % 2 != 0)
    {
        return ans;
    }

    for (int n = 0; n < (1 << N); n++)
    {
        boost::dynamic_bitset<> bits(N, n);
        if (bits.count() != bits.size() / 2)
        {
            continue;
        }

        if (is_correct(bits))
        {
            string a;
            REP(i, bits.size())
            {
                a.push_back(bits.test(i) ? '(' : ')');
            }
            ans.push_back(a);
        }
    }

    sort(ALL(ans));
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    std::cin >> N;
    for (auto ans : solve(N))
    {
        std::cout << ans << '\n';
    }
    return 0;
}
