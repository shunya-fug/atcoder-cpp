#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const vector<int> dx = {0, 0, -1, 1};
const vector<int> dy = {1, -1, 0, 0};
int64_t solve(auto H, auto W, const std::vector<std::vector<char>> &c)
{
    int64_t ans = -1;
    const auto search = [&](const auto self, const int64_t x, const int64_t y, vector<vector<int64_t>> distance) -> void
    {
        REP(i, dx.size())
        {
            auto nx = x + dx[i],
                 ny = y + dy[i];
            if (0 <= nx and nx < W and 0 <= ny and ny < H and c[ny][nx] != '#')
            {
                switch (distance[ny][nx])
                {
                // 始点に戻ってきた場合
                case 0:
                    ans = max(ans, distance[y][x] + 1);
                    break;
                // 行き先が未到達の場合
                case -1:
                    auto next_distance = distance;
                    next_distance[ny][nx] = next_distance[y][x] + 1;
                    self(self, nx, ny, next_distance);
                    break;
                }
            }
        }
    };

    REP(i, H)
    {
        REP(j, W)
        {
            if (c[i][j] != '#')
            {
                vector<vector<int64_t>> distance(H, vector<int64_t>(W, -1));
                distance[i][j] = 0;
                search(search, j, i, distance);
            }
        }
    }
    return ans < 3 ? -1 : ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int H, W;
    std::cin >> H >> W;
    std::vector<std::vector<char>> c(H, std::vector<char>(W));
    REP(i, H)
    {
        REP(j, W)
        {
            std::cin >> c[i][j];
        }
    }
    auto ans = solve(H, W, c);
    std::cout << ans << '\n';
    return 0;
}
