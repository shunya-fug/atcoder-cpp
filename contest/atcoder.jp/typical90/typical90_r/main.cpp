#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

struct Pos3d
{
    double x;
    double y;
    double z;

    Pos3d(double x, double y, double z) : x(x), y(y), z(z) {}
};

vector<double> solve(double T, double L, double X, double Y, int Q, const std::vector<double> &E)
{
    vector<double> ans;

    auto pos1 = Pos3d(X, Y, 0);
    for (auto e : E)
    {
        auto theta = 360.0 * e / T;
        auto pos2 = Pos3d(0, -(L / 2) * sin(M_PI * theta / 180.0), (L / 2) * (1 - cos(M_PI * theta / 180.0)));
        ans.push_back(180.0 * atan2(pos2.z, sqrt(pow(pos1.x, 2) + pow(pos1.y - pos2.y, 2))) / M_PI);
    }

    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    double T, L, X, Y;
    int Q;
    std::cin >> T >> L >> X >> Y >> Q;
    std::vector<double> E(Q);
    REP(i, Q)
    {
        std::cin >> E[i];
    }
    for (auto ans : solve(T, L, X, Y, Q, E))
    {
        std::cout << fixed << setprecision(10) << ans << '\n';
    }
    return 0;
}
