#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";
bool solve(int N, const std::vector<int64_t> &A)
{
    int64_t sum_A = accumulate(ALL(A), 0LL), target = sum_A / 10;
    if (sum_A % 10 != 0)
    {
        return false;
    }

    vector<int64_t> acc(2 * N);
    acc[0] = A[0];
    REP(j, 2)
    {
        REP(i, N)
        {
            if (i == 0 and j == 0)
            {
                continue;
            }
            acc[i + N * j] = acc[i + N * j - 1] + A[i];
        }
    }

    int r = 0;
    REP(l, acc.size() - 1)
    {
        while (acc[r] - acc[l] < target)
        {
            r++;
        }
        if (acc[r] - acc[l] == target)
        {
            return true;
        }
    }
    return false;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> A(N);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    auto ans = solve(N, A);
    std::cout << (ans ? YES : NO) << '\n';
    return 0;
}
