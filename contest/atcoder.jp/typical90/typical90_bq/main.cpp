#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/dynamic_bitset.hpp>

constexpr int64_t MOD = 1000000007;
int64_t solve(int64_t N, int64_t K)
{
    if (N == 1)
    {
        return K;
    }

    // 10 ^ 18 < 2 ^ 64
    const int max_bit_length = 64;
    bitset<max_bit_length> bs(N - 2);
    int64_t ans = K * (K - 1) % MOD, n = K - 2;
    REP(i, max_bit_length)
    {
        if (bs.test(i))
        {
            ans = ans * n % MOD;
        }
        n = n * n % MOD;
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N, K;
    std::cin >> N >> K;
    auto ans = solve(N, K);
    std::cout << ans << '\n';
    return 0;
}
