#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <atcoder/modint.hpp>

// 連結の状態
enum state : int
{
    // 'a'のみ
    a,
    // 'b'のみ
    b,
    // 'a'と'b'
    ab,
};

constexpr int64_t MOD = 1000000007;
using mint = atcoder::modint1000000007;
int64_t solve(int N, const std::vector<char> &c, const std::vector<int64_t> &a, const std::vector<int64_t> &b)
{
    vector<vector<int64_t>> G(N + 1, vector<int64_t>());
    REP(i, a.size())
    {
        G[a[i]].push_back(b[i]);
        G[b[i]].push_back(a[i]);
    }

    // dp[頂点番号][連結の状態] = 通り数
    vector<vector<mint>> dp(N + 1, vector<mint>(3));
    const auto dfs = [&](const auto &self, const int pre, const int from) -> void
    {
        mint v1 = 1,
             v2 = 1;
        for (auto to : G[from])
        {
            if (to == pre)
            {
                continue;
            }
            // 先に末端の値を求める
            self(self, from, to);

            if (c[from - 1] == 'a')
            {
                v1 *= dp[to][state::a] + dp[to][state::ab];
                v2 *= dp[to][state::a] + dp[to][state::b] + 2LL * dp[to][state::ab];
            }
            if (c[from - 1] == 'b')
            {
                v1 *= dp[to][state::b] + dp[to][state::ab];
                v2 *= dp[to][state::a] + dp[to][state::b] + 2LL * dp[to][state::ab];
            }
        }

        if (c[from - 1] == 'a')
        {
            dp[from][state::a] = v1;
            dp[from][state::ab] = v2 - v1;
        }
        if (c[from - 1] == 'b')
        {
            dp[from][state::b] = v1;
            dp[from][state::ab] = v2 - v1;
        }
    };
    dfs(dfs, 0, 1);
    return dp[1][state::ab].val();
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<char> c(N);
    std::vector<int64_t> a(N - 1), b(N - 1);
    REP(i, N)
    {
        std::cin >> c[i];
    }
    REP(i, N - 1)
    {
        std::cin >> a[i] >> b[i];
    }
    auto ans = solve(N, c, a, b);
    std::cout << ans << '\n';
    return 0;
}
