#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string NO = "Impossible";
std::string solve(int N, int64_t S, const std::vector<int64_t> &A, const std::vector<int64_t> &B)
{
    // dp[日数][総額] = 購入可否(bool)
    vector<vector<bool>> buy(N + 1, vector<bool>(S + 1));
    buy[0][0] = true;
    REP(day, N)
    REP_R(price, S)
    {
        if (!buy[day][price])
        {
            continue;
        }

        if (price + A[day] < (int)buy.front().size())
        {
            buy[day + 1][price + A[day]] = true;
        }
        if (price + B[day] < (int)buy.front().size())
        {
            buy[day + 1][price + B[day]] = true;
        }
    }

    // 条件を満たすことが出来ない場合
    if (buy[N][S] == false)
    {
        return NO;
    }

    // 条件を満たす組み合わせがある場合
    string ans = "";
    REP_R(day, N)
    {
        if (0 <= S - A[day] and buy[day][S - A[day]])
        {
            ans.push_back('A');
            S -= A[day];
        }
        else if (0 <= S - B[day] and buy[day][S - B[day]])
        {
            ans.push_back('B');
            S -= B[day];
        }
    }
    ranges::reverse(ans);
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    int64_t S;
    std::cin >> N;
    std::vector<int64_t> A(N), B(N);
    std::cin >> S;
    REP(i, N)
    {
        std::cin >> A[i] >> B[i];
    }
    auto ans = solve(N, S, A, B);
    std::cout << ans << '\n';
    return 0;
}
