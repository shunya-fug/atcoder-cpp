#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/dynamic_bitset.hpp>

int64_t solve(int N, int K, int64_t P, const std::vector<int64_t> &A)
{
    // result[個数][値段合計]
    using result = vector<vector<int64_t>>;
    auto get_pattern = [&](const auto &group)
    {
        result rs(K + 1);
        for (auto i = 0; i < (1 << group.size()); i++)
        {
            boost::dynamic_bitset<> bs(group.size(), i);
            if (bs.count() > K)
            {
                continue;
            }

            // 1の立っているインデックスを走査
            int64_t total = 0;
            for (boost::dynamic_bitset<>::size_type pos = bs.find_first();
                 pos != bs.npos;
                 pos = bs.find_next(pos))
            {
                total += group[pos];
            }
            rs[bs.count()].push_back(total);
        }
        for (auto &r : rs)
        {
            ranges::sort(r);
        }
        return rs;
    };
    auto left = begin(A),
         middle = begin(A) + N / 2,
         right = end(A);
    pair<result, result> results = {
        get_pattern(ranges::subrange(left, middle)),
        get_pattern(ranges::subrange(middle, right))};
    int64_t ans = 0;
    REP(n, results.first.size())
    {
        REP(total, results.first[n].size())
        {
            ans += upper_bound(ALL(results.second[K - n]), P - results.first[n][total]) - begin(results.second[K - n]);
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, K;
    int64_t P;
    std::cin >> N >> K >> P;
    std::vector<int64_t> A(N);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    auto ans = solve(N, K, P, A);
    std::cout << ans << '\n';
    return 0;
}
