#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, const std::vector<int64_t> &A, const std::vector<int64_t> &B)
{
    vector<vector<int64_t>> road(N + 1);
    REP(i, N - 1)
    {
        road[A[i]].push_back(B[i]);
        road[B[i]].push_back(A[i]);
    }

    const auto bfs = [&](int64_t start) -> pair<int64_t, int64_t>
    {
        vector<int64_t> dist(N + 1, -1);
        queue<int64_t> q;
        q.push(start);
        dist[start] = 0;
        while (!q.empty())
        {
            int64_t city = q.front();
            q.pop();

            for (auto next_city : road[city])
            {
                if (dist[next_city] != -1)
                {
                    continue;
                }

                dist[next_city] = dist[city] + 1;
                q.push(next_city);
            }
        }
        auto it = max_element(ALL(dist));
        return {it - dist.begin(), *it};
    };

    return bfs(bfs(A[0]).first).second + 1;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> A(N - 1), B(N - 1);
    REP(i, N - 1)
    {
        std::cin >> A[i] >> B[i];
    }
    auto ans = solve(N, A, B);
    std::cout << ans << '\n';
    return 0;
}
