#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

// res[i][c] := i 文字目以降で最初に文字 c が登場する index
// 存在しないときは N
vector<vector<int>> calc_next(const string &S)
{
    // 文字列 S の長さ
    int N = (int)S.size();

    // 答え
    vector<vector<int>> res(N + 1, vector<int>(26, N));

    // 後ろから見る
    for (int i = N - 1; i >= 0; --i)
    {
        // i + 1 文字目以降の結果を一旦 i 文字にコピー
        res[i] = res[i + 1];

        // i 文字目の情報を反映させる
        res[i][S[i] - 'a'] = i;
    }
    return res;
}

std::string solve(int64_t N, int64_t K, std::string S)
{
    string ans;
    auto nex = calc_next(S);
    int pos = -1;
    // 左から順番に文字を決めていく
    REP(i, K)
    {
        // 辞書順に探索
        for (auto c = 'a'; c <= 'z'; c++)
        {
            // 次に対象の文字が出てくる場所
            auto next_pos = nex[pos + 1][c - 'a'];
            // その場所以降の文字含めてちゃんとK文字の答えが作れるかどうか
            if (N - next_pos >= K - i)
            {
                ans += c;
                pos = next_pos;
                break;
            }
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N, K;
    std::string S;
    std::cin >> N >> K >> S;
    auto ans = solve(N, K, S);
    std::cout << ans << '\n';
    return 0;
}
