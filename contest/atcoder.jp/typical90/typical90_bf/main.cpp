#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/lexical_cast.hpp>

const int64_t MOD = 1e5;
int64_t push(int64_t n)
{
    int64_t tmp = 0;
    for (auto c : to_string(n))
    {
        tmp += boost::lexical_cast<int64_t>(c);
    }
    return (n + tmp) % MOD;
}

int64_t solve(int64_t N, int64_t K)
{
    vector<int64_t> history = {N};
    vector<bool> display(MOD, false);
    display[N] = true;
    int64_t n_push = 0;
    while (!display[push(history.back())])
    {
        auto n = push(history.back());
        n_push++;
        if (n_push == K)
        {
            return n;
        }
        display[n] = true;
        history.push_back(n);
    }
    auto partition = ranges::find(history, push(history.back()));
    vector<int64_t> cycle;
    copy(partition, history.end(), back_inserter(cycle));
    // ボタンを押す回数のうち周期的な部分
    auto n_push_cycle = K - (partition - history.begin());
    return cycle[n_push_cycle % cycle.size()];
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N, K;
    std::cin >> N >> K;
    auto ans = solve(N, K);
    std::cout << ans << '\n';
    return 0;
}
