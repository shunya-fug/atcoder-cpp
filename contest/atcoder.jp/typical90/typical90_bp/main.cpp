#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <atcoder/dsu.hpp>

const string AMBIGUOUS = "Ambiguous";
vector<string> solve(int64_t N, int64_t Q, const std::vector<int64_t> &T, const std::vector<int64_t> &X, const std::vector<int64_t> &Y, const std::vector<int64_t> &V)
{
    vector<int64_t> sum(N);
    REP(i, Q)
    {
        if (T[i] == 0)
        {
            sum[X[i]] = V[i];
        }
    }

    vector<int64_t> potential(N + 1);
    REP(i, sum.size())
    {
        potential[i + 1] = sum[i] - potential[i];
    }

    vector<string> ans;
    atcoder::dsu d(N + 1);
    REP(i, Q)
    {
        if (T[i] == 0)
        {
            d.merge(X[i], Y[i]);
        }
        if (T[i] == 1)
        {
            if (!d.same(X[i], Y[i]))
            {
                ans.push_back(AMBIGUOUS);
            }
            else if ((X[i] + Y[i]) % 2 == 0)
            {
                ans.push_back(to_string(V[i] + (potential[Y[i]] - potential[X[i]])));
            }
            else
            {
                ans.push_back(to_string((potential[X[i]] + potential[Y[i]]) - V[i]));
            }
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N, Q;
    std::cin >> N >> Q;
    std::vector<int64_t> T(Q), X(Q), Y(Q), V(Q);
    REP(i, Q)
    {
        std::cin >> T[i] >> X[i] >> Y[i] >> V[i];
    }
    for (auto ans : solve(N, Q, T, X, Y, V))
    {
        std::cout << ans << '\n';
    }

    return 0;
}
