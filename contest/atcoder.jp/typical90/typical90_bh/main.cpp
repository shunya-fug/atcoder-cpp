#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, const std::vector<int64_t> &A)
{
    vector<int64_t> dp(N), left(N), right(N);
    int64_t cnt = 0;
    REP(i, N)
    {
        auto p = lower_bound(begin(dp), begin(dp) + cnt, A[i]) - begin(dp);
        dp[p] = A[i];
        left[i] = p + 1;
        if (p == cnt)
        {
            cnt++;
        }
    }
    cnt = 0;
    REP_R(i, N)
    {
        auto p = lower_bound(begin(dp), begin(dp) + cnt, A[i]) - begin(dp);
        dp[p] = A[i];
        right[i] = p + 1;
        if (p == cnt)
        {
            cnt++;
        }
    }

    int64_t ans = 0;
    REP(i, N)
    {
        ans = max(ans, left[i] + right[i] - 1);
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> A(N);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    auto ans = solve(N, A);
    std::cout << ans << '\n';
    return 0;
}
