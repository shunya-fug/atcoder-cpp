#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/dynamic_bitset.hpp>

int64_t solve(int H, int W, const std::vector<vector<int64_t>> &P)
{
    vector<int64_t> pattern(H);
    iota(ALL(pattern), 0LL);
    int64_t ans = 0;
    for (auto n = 0; n < (1 << H); n++)
    {
        // bitが立っている行を選択
        boost::dynamic_bitset<> bs(H, n);
        vector<int64_t> is;
        // 1の立っているインデックスを走査
        for (auto i = bs.find_first(); i != bs.npos; i = bs.find_next(i))
        {
            is.push_back(i);
        }
        if (is.empty())
        {
            continue;
        }
        unordered_map<int64_t, int64_t> cnt;
        REP(j, W)
        {
            auto correct = true;
            int64_t pre = 0;
            for (auto i : is)
            {
                if (pre != 0 and pre != P[i][j])
                {
                    correct = false;
                    break;
                }
                pre = P[i][j];
            }
            if (correct)
            {
                cnt[P[is.front()][j]] += bs.count();
            }
        }
        if (!cnt.empty())
        {
            ans = max(ans, (*ranges::max_element(cnt, [](const auto &l, const auto &r)
                                                 { return l.second < r.second; }))
                               .second);
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int H, W;
    std::cin >> H >> W;
    std::vector<vector<int64_t>> P(H, vector<int64_t>(W));
    REP(i, H)
    {
        REP(j, W)
        {
            std::cin >> P[i][j];
        }
    }
    auto ans = solve(H, W, P);
    std::cout << ans << '\n';
    return 0;
}
