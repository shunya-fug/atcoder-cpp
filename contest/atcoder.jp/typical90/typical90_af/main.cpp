#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const int64_t inf = 1e18;

int64_t solve(int N, vector<vector<int64_t>> &A, int M, vector<int64_t> &X, vector<int64_t> &Y)
{
    unordered_map<int64_t, set<int64_t>> bad_relation;
    REP(i, M)
    {
        bad_relation[X[i]].insert(Y[i]);
        bad_relation[Y[i]].insert(X[i]);
    }

    vector<int> order;
    REP3(i, 1, N + 1)
    {
        order.push_back(i);
    }

    int64_t ans = inf;
    do
    {
        int64_t score = 0;
        REP3(i, 1, order.size())
        {
            auto pre = order[i - 1], cur = order[i];
            if (any_of(ALL(bad_relation[cur]), [&](auto x)
                       { return x == pre; }))
            {
                score = inf;
                break;
            }
            score += A[pre - 1][i - 1];
        }
        score += A[order.back() - 1].back();
        ans = min(ans, score);
    } while (next_permutation(ALL(order)));

    return ans == inf ? -1 : ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<vector<int64_t>> A(N, vector<int64_t>(N));
    REP(i, N)
    {
        REP(j, N)
        {
            std::cin >> A[i][j];
        }
    }
    int M;
    cin >> M;
    vector<int64_t> X(M), Y(M);
    REP(i, M)
    {
        cin >> X[i] >> Y[i];
    }
    auto ans = solve(N, A, M, X, Y);
    std::cout << ans << '\n';
    return 0;
}
