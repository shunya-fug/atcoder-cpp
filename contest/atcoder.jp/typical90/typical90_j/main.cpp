#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

vector<pair<int64_t, int64_t>> solve(int N, const std::vector<int64_t> &C, const std::vector<int64_t> &P, int Q, const std::vector<int64_t> &L, const std::vector<int64_t> &R)
{
    vector<int64_t> c1(N + 1), c2(N + 1);
    REP3(i, 1, N + 1)
    {
        c1[i] = c1[i - 1];
        c2[i] = c2[i - 1];
        if (C[i - 1] == 1)
        {
            c1[i] += P[i - 1];
        }
        if (C[i - 1] == 2)
        {
            c2[i] += P[i - 1];
        }
    }

    vector<pair<int64_t, int64_t>> ans(Q);
    REP(i, Q)
    {
        ans[i] = {c1[R[i]] - c1[L[i] - 1], c2[R[i]] - c2[L[i] - 1]};
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, Q;
    std::cin >> N;
    std::vector<int64_t> C(N), P(N);
    REP(i, N)
    {
        std::cin >> C[i] >> P[i];
    }
    std::cin >> Q;
    std::vector<int64_t> L(Q), R(Q);
    REP(i, Q)
    {
        std::cin >> L[i] >> R[i];
    }
    auto ans = solve(N, C, P, Q, L, R);
    REP(i, Q)
    {
        std::cout << ans[i].first << ' ' << ans[i].second << '\n';
    }
    return 0;
}
