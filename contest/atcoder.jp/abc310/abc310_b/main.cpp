#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

const std::string YES = "Yes";
const std::string NO = "No";
bool solve(int N, int M, const std::vector<int64_t> &P, const std::vector<int64_t> &C, const std::vector<std::vector<int64_t>> &F)
{
    REP(i, N)
    {
        REP(j, N)
        {
            if (P[i] >= P[j])
            {
                set<int64_t> fs_i, fs_j;
                REP(k, C[i])
                {
                    fs_i.insert(F[i][k]);
                }
                REP(k, C[j])
                {
                    fs_j.insert(F[j][k]);
                }

                // j番目の製品の機能にi番目の製品の機能が全て含まれる
                if (ranges::includes(fs_j, fs_i))
                {
                    // P_i > P_j もしくはj番目の製品が差分機能を含む
                    if (P[i] > P[j] or fs_j.size() > fs_i.size())
                    {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, M;
    std::cin >> N >> M;
    std::vector<int64_t> P(N), C(N);
    vector<vector<int64_t>> F(N);
    REP(i, N)
    {
        std::cin >> P[i] >> C[i];
        REP(j, C[i])
        {
            int64_t f;
            std::cin >> f;
            F[i].push_back(f);
        }
    }
    auto ans = solve(N, M, P, C, F);
    std::cout << (ans ? YES : NO) << '\n';
    return 0;
}
