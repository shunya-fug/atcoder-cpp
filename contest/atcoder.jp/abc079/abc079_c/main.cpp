#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/lexical_cast.hpp>
#include <boost/format.hpp>

struct Op
{
    int v;

    Op(char c) : v(c == '1' ? 1 : -1) {}

    string to_string() const
    {
        return v == 1 ? "+" : "-";
    }
};

std::string solve(std::string ABCD)
{
    auto A = boost::lexical_cast<int>(ABCD.at(0));
    auto B = boost::lexical_cast<int>(ABCD.at(1));
    auto C = boost::lexical_cast<int>(ABCD.at(2));
    auto D = boost::lexical_cast<int>(ABCD.at(3));
    for (auto i = 0; i < (1 << 3); i++)
    {
        bitset<3> bs(i);
        auto bs_str = bs.to_string();
        Op op1 = Op(bs_str.at(0));
        Op op2 = Op(bs_str.at(1));
        Op op3 = Op(bs_str.at(2));
        if (A + op1.v * B + op2.v * C + op3.v * D == 7)
        {
            return (boost::format("%1%%2%%3%%4%%5%%6%%7%=7") % A % op1.to_string() % B % op2.to_string() % C % op3.to_string() % D).str();
        }
    }
    return "";
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::string ABCD;
    std::cin >> ABCD;
    auto ans = solve(ABCD);
    std::cout << ans << '\n';
    return 0;
}
