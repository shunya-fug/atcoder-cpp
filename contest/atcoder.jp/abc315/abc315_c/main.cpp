#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

struct IceCream
{
    int64_t f;
    int64_t s;
};

int64_t solve(int N, vector<IceCream> &iceCreams, const set<int64_t> &flavors)
{
    sort(ALL(iceCreams), [](const IceCream &a, const IceCream &b)
         { return a.s > b.s; });
    int64_t ans = iceCreams[0].s;
    if (flavors.size() == 1)
    {
        return ans + iceCreams[1].s / 2;
    }
    else
    {
        for (auto iceCream : iceCreams)
        {
            if (iceCream.f != iceCreams[0].f)
            {
                return max(ans + iceCreams[1].s / 2, iceCreams[0].s + iceCream.s);
            }
        }
    }
    return 0;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    vector<IceCream> iceCreams(N);
    set<int64_t> flavors;
    REP(i, N)
    {
        std::cin >> iceCreams[i].f >> iceCreams[i].s;
        flavors.insert(iceCreams[i].f);
    }
    auto ans = solve(N, iceCreams, flavors);
    std::cout << ans << '\n';
    return 0;
}
