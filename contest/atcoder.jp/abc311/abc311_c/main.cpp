#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/algorithm/string.hpp>
#include <boost/range/adaptors.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/range/algorithm.hpp>
#include <boost/range/sub_range.hpp>

vector<int64_t> get_route(vector<int64_t> &points, vector<int64_t> &route, int64_t position)
{
    if (points[position] == 0)
    {
        return vector(find(ALL(route), position), route.end());
    }

    auto next = points[position];
    // 通った点は0にする
    points[position] = 0;
    route.push_back(position);
    return get_route(points, route, next);
}

std::vector<int64_t> solve(int N, const std::vector<int64_t> &A)
{
    vector<int64_t> points;
    points.push_back(0);
    for (auto a : A)
    {
        points.push_back(a);
    }

    vector<int64_t> route;
    return get_route(points, route, 1);
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> A(N);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    auto ans = solve(N, A);
    std::cout << ans.size() << '\n';
    std::cout << boost::join(ans | boost::adaptors::transformed([](int64_t x)
                                                                { return boost::lexical_cast<std::string>(x); }),
                             " ")
              << endl;
    return 0;
}
