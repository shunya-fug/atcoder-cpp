#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

// x番の組織が親組織に提出する枚数を返す
// childrenは組織の関係を表す2次元配列(参照渡し)
auto count_report_num(vector<vector<int>> &children, int x)
{
    auto report_num = 1;
    // 子組織がない場合は自分の分を返す
    if (children.at(x).empty())
    {
        return report_num;
    }

    for (auto child : children.at(x))
    {
        report_num += count_report_num(children, child);
    }
    return report_num;
}

auto solve(int N, const std::vector<int64_t> &p)
{
    // 組織の関係から2次元配列を作る
    vector<vector<int>> children(N); // ある組織の子組織の番号一覧
    for (int i = 1; i < N; i++)
    {
        int parent = p.at(i);             // i番の親組織の番号
        children.at(parent).push_back(i); // parentの子組織一覧にi番を追加
    }

    vector<int> ans(N);
    REP(i, N)
    {
        ans.at(i) = count_report_num(children, i);
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> p(N);
    p.at(0) = -1;
    REP3(i, 1, N)
    {
        std::cin >> p.at(i);
    }
    auto ans = solve(N, p);
    REP(i, N)
    {
        std::cout << ans.at(i) << '\n';
    }
    return 0;
}
