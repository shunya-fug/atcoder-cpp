#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

// 各操作を行う関数を実装する

// AとBに共通して含まれる要素からなる集合を返す
bitset<50> intersection(bitset<50> A, bitset<50> B)
{
    return A & B;
}
// AとBのうち少なくとも一方に含まれる要素からなる集合を返す
bitset<50> union_set(bitset<50> A, bitset<50> B)
{
    return A | B;
}
// AとBのうちどちらか一方にだけ含まれる要素からなる集合を返す
bitset<50> symmetric_diff(bitset<50> A, bitset<50> B)
{
    return A ^ B;
}
// Aから値xを除く
bitset<50> subtract(bitset<50> A, int x)
{
    return A.reset(x);
}
// Aに含まれる要素に1を加える(ただし、要素49が含まれる場合は0になるものとする)
bitset<50> increment(bitset<50> A)
{
    return (A << 1) | (A >> (50 - 1));
}
// Aに含まれる要素から1を引く(ただし、要素0が含まれる場合は49になるものとする)
bitset<50> decrement(bitset<50> A)
{
    return (A >> 1) | (A << (50 - 1));
}

// Sに値xを加える
bitset<50> add(bitset<50> S, int x)
{
    S.set(x, 1); // xビット目を1にする
    return S;
}

// 集合Sの内容を昇順で出力する(スペース区切りで各要素の値を出力する)
void print_set(bitset<50> S)
{
    vector<int> cont;
    for (int i = 0; i < 50; i++)
    {
        if (S.test(i))
        {
            cont.push_back(i);
        }
    }
    for (int i = 0; i < cont.size(); i++)
    {
        if (i > 0)
            cout << " ";
        cout << cont.at(i);
    }
    cout << endl;
}

auto solve(int N, const bitset<50> &A, int M, const bitset<50> &B, string command)
{
    // 操作
    string com = command;

    if (com == "intersection")
    {
        print_set(intersection(A, B));
    }
    else if (com == "union_set")
    {
        print_set(union_set(A, B));
    }
    else if (com == "symmetric_diff")
    {
        print_set(symmetric_diff(A, B));
    }
    else if (com == "subtract")
    {
        int x;
        cin >> x;
        print_set(subtract(A, x));
    }
    else if (com == "increment")
    {
        print_set(increment(A));
    }
    else if (com == "decrement")
    {
        print_set(decrement(A));
    }
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, M;
    string command;
    bitset<50> A, B;
    std::cin >> N;
    REP(i, N)
    {
        int x;
        std::cin >> x;
        A = add(A, x);
    }
    std::cin >> M;
    REP(i, M)
    {
        int x;
        std::cin >> x;
        B = add(B, x);
    }
    std::cin >> command;
    solve(N, A, M, B, command);
    return 0;
}
