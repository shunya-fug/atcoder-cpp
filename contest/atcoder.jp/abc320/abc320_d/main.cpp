#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <atcoder/dsu>

const string UNDECIDABLE = "undecidable";
vector<vector<int64_t>> solve(int64_t N, int M, const std::vector<int64_t> &A, const std::vector<int64_t> &B, const std::vector<int64_t> &X, const std::vector<int64_t> &Y)
{
    atcoder::dsu d(N + 1);
    vector<vector<pair<int64_t, pair<int64_t, int64_t>>>> G(N + 1);
    REP(i, M)
    {
        d.merge(A[i], B[i]);
        G[A[i]].push_back({B[i], {X[i], Y[i]}});
        G[B[i]].push_back({A[i], {-X[i], -Y[i]}});
    }

    vector<pair<int64_t, int64_t>> positions(N + 1);
    vector<bool> known(N + 1, false);
    positions[1] = {0, 0};
    known[1] = true;
    queue<int64_t> Q;
    Q.push(1);
    while (!Q.empty())
    {
        auto src = Q.front();
        Q.pop();
        for (auto g : G[src])
        {
            auto dst = g.first;
            auto [x, y] = g.second;
            if (!known[dst])
            {
                positions[dst] = {positions[src].first + x, positions[src].second + y};
                known[dst] = true;
                Q.push(dst);
            }
        }
    }

    vector<vector<int64_t>> ans(N);
    REP(i, N)
    {
        if (!d.same(i + 1, 1))
        {
            continue;
        }
        ans[i].push_back(positions[i + 1].first);
        ans[i].push_back(positions[i + 1].second);
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    std::cin >> N >> M;
    std::vector<int64_t> A(M), B(M), X(M), Y(M);
    REP(i, M)
    {
        std::cin >> A[i] >> B[i] >> X[i] >> Y[i];
    }
    for (auto ans : solve(N, M, A, B, X, Y))
    {
        if (ans.empty())
        {
            std::cout << UNDECIDABLE << '\n';
        }
        else
        {
            std::cout << ans[0] << " " << ans[1] << '\n';
        }
    }
    return 0;
}
