#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/lexical_cast.hpp>

bool can(const std::vector<string> &s)
{
    REP(i, 10)
    {
        auto ci = boost::lexical_cast<char>(i);
        if (all_of(ALL(s), [&](auto ss)
                   { return ss.find(ci) != string::npos; }))
        {
            return true;
        }
    }
    return false;
}

int64_t solve(int M, const std::vector<string> &s)
{
    if (!(can(s)))
    {
        return -1;
    }

    int64_t ans = 10e9;
    REP(i, 10)
    {
        auto ci = boost::lexical_cast<char>(i);
        if (all_of(ALL(s), [&](auto ss)
                   { return ss.find(ci) != string::npos; }))
        {
            vector<int64_t> p = {0, 1, 2};
            do
            {
                int64_t t = -1;
                vector<int64_t> pushed(s.size(), -1);
                while (any_of(ALL(pushed), [](auto n)
                              { return n == -1; }))
                {
                    t++;
                    if (pushed[p[0]] == -1 and s[p[0]][t % M] == ci)
                    {
                        pushed[p[0]] = t;
                        continue;
                    }
                    if (pushed[p[1]] == -1 and s[p[1]][t % M] == ci)
                    {
                        pushed[p[1]] = t;
                        continue;
                    }
                    if (pushed[p[2]] == -1 and s[p[2]][t % M] == ci)
                    {
                        pushed[p[2]] = t;
                        continue;
                    }
                }
                ans = min(ans, t);
            } while (next_permutation(ALL(p)));
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int M;
    std::cin >> M;
    std::vector<string> s(3);
    REP(i, 3)
    {
        std::cin >> s[i];
    }
    auto ans = solve(M, s);
    std::cout << ans << '\n';
    return 0;
}
