#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

vector<int64_t> solve(int64_t N, int M, const std::vector<int64_t> &T, const std::vector<int64_t> &W, const std::vector<int64_t> &S)
{
    vector<int64_t> people(N, 0);
    priority_queue<int64_t, vector<int64_t>, greater<>> waiting;
    REP(i, N)
    {
        waiting.push(i);
    }
    // first: t, second: order
    priority_queue<pair<int64_t, int64_t>, vector<pair<int64_t, int64_t>>, greater<>> leaving;

    REP(i, M)
    {
        // 列から離れている人が戻ってくるかどうか確認
        while (!leaving.empty() and leaving.top().first <= T[i])
        {
            waiting.push(leaving.top().second);
            leaving.pop();
        }

        // 順番待ちの人がいる場合
        if (!waiting.empty())
        {
            // そうめんを流し、順番待ちの先頭の人が取る
            people[waiting.top()] += W[i];
            // そうめんを取った人は列から離れる
            leaving.push({T[i] + S[i], waiting.top()});
            waiting.pop();
        }
    }
    return people;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    std::cin >> N >> M;
    std::vector<int64_t> T(M), W(M), S(M);
    REP(i, M)
    {
        std::cin >> T[i] >> W[i] >> S[i];
    }
    auto ans = solve(N, M, T, W, S);
    REP(i, N)
    {
        std::cout << ans[i] << '\n';
    }
    return 0;
}
