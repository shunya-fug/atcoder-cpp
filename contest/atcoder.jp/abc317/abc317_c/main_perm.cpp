#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t N, int M, const std::vector<int64_t> &A, const std::vector<int64_t> &B, const std::vector<int64_t> &C)
{
    vector<vector<int>> distance(N + 1, vector<int>(N + 1, -1));
    REP(i, M)
    {
        distance[A[i]][B[i]] = C[i];
        distance[B[i]][A[i]] = C[i];
    }

    vector<int> route;
    REP3(i, 1, N + 1)
    {
        route.push_back(i);
    }

    int64_t ans = 0;
    do
    {
        int64_t sum_distance = 0;
        for (auto it = route.begin() + 1; it != route.end(); it++)
        {
            auto d = distance[*(it - 1)][*it];
            if (d == -1)
            {
                break;
            }
            sum_distance += d;
        }
        ans = max(ans, sum_distance);
    } while (next_permutation(ALL(route)));

    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    std::cin >> N >> M;
    std::vector<int64_t> A(M), B(M), C(M);
    REP(i, M)
    {
        std::cin >> A[i] >> B[i] >> C[i];
    }
    auto ans = solve(N, M, A, B, C);
    std::cout << ans << '\n';
    return 0;
}
