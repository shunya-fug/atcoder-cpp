#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t N, int M, const std::vector<int64_t> &A, const std::vector<int64_t> &B, const std::vector<int64_t> &C)
{
    int64_t ans = 0;
    auto move = [&](auto self, int64_t town, int64_t distance, vector<bool> visited) -> void
    {
        visited[town] = true;
        REP(i, M)
        {
            if (A[i] == town && !visited[B[i]])
            {
                self(self, B[i], distance + C[i], visited);
            }

            if (B[i] == town && !visited[A[i]])
            {
                self(self, A[i], distance + C[i], visited);
            }
        }

        ans = max(ans, distance);
    };

    REP3(i, 1, N + 1)
    {
        vector<bool> visited(N + 1, false);
        move(move, i, 0, visited);
    }

    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    std::cin >> N >> M;
    std::vector<int64_t> A(M), B(M), C(M);
    REP(i, M)
    {
        std::cin >> A[i] >> B[i] >> C[i];
    }
    auto ans = solve(N, M, A, B, C);
    std::cout << ans << '\n';
    return 0;
}
