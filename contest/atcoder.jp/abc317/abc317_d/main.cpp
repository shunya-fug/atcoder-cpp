#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
const int64_t inf = 1e18;

struct Info
{
    // 勝つために鞍替えさせる最小人数
    int64_t n;
    // 勝ったら増える議席数
    int64_t count;
};

int64_t solve(int N, const std::vector<int64_t> &X, const std::vector<int64_t> &Y, const std::vector<int64_t> &Z)
{
    int64_t all = accumulate(ALL(Z), 0L), border = (all + 1) / 2, count = 0;
    vector<Info> info_list;
    REP(i, N)
    {
        if (X[i] > Y[i])
        {
            count += Z[i];
        }
        else
        {
            info_list.push_back(Info((Y[i] - X[i]) / 2 + 1, Z[i]));
        }
    }

    vector<int64_t> dp(all + 1, inf);
    REP(i, count + 1)
    {
        dp[i] = 0;
    }

    for (auto info : info_list)
    {
        REP3R(i, info.count, all + 1)
        {
            dp[i] = min(dp[i], dp[i - info.count] + info.n);
        }
    }

    return *min_element(dp.begin() + border, dp.end());
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> X(N), Y(N), Z(N);
    REP(i, N)
    {
        std::cin >> X[i] >> Y[i] >> Z[i];
    }
    auto ans = solve(N, X, Y, Z);
    std::cout << ans << '\n';
    return 0;
}
