#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/lexical_cast.hpp>

std::vector<std::vector<char>> solve(int H, int64_t W, const std::vector<std::vector<char>> &S)
{
    std::vector<std::vector<char>> ans(H, std::vector<char>(W, '#'));
    REP(i, H)
    {
        REP(j, W)
        {
            if (S[i + 1][j + 1] == '#')
            {
                ans[i][j] = '#';
                continue;
            }
            int count = 0;
            REP3(k, -1, 2)
            {
                REP3(l, -1, 2)
                {
                    if (k == 0 && l == 0)
                    {
                        continue;
                    }
                    if (S[i + 1 + k][j + 1 + l] == '#')
                    {
                        count++;
                    }
                }
            }
            ans[i][j] = boost::lexical_cast<char>(count);
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int H;
    int64_t W;
    std::cin >> H;
    std::vector<std::vector<char>> S;
    std::cin >> W;
    S.push_back(vector<char>(W + 2, '.'));
    REP(i, H)
    {
        string s;
        std::cin >> s;
        s = "." + s + ".";
        S.push_back(vector<char>(ALL(s)));
    }
    S.push_back(vector<char>(W + 2, '.'));
    auto ans = solve(H, W, S);
    for (auto a : ans)
    {
        ostringstream oss;
        copy(ALL(a), ostream_iterator<char>(oss));
        std::cout << oss.str() << '\n';
    }
    return 0;
}
