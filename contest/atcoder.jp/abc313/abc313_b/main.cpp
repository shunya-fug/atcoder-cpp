#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

struct Info
{
    int64_t winner;
    int64_t loser;
};

int64_t solve(int64_t N, int M, const std::vector<int64_t> &A, const std::vector<int64_t> &B)
{
    vector<Info> infos(N);
    REP(i, N)
    {
        infos[i].winner = A[i] - 1;
        infos[i].loser = B[i] - 1;
    }

    vector<int64_t> counts(N, 0);
    for (auto info : infos)
    {
        counts[info.loser]++;
    }

    int64_t ans = -1;
    REP(i, N)
    {
        if (counts[i] == 0)
        {
            if (ans != -1)
            {
                return -1;
            }
            else
            {
                ans = i + 1;
            }
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    int M;
    std::cin >> N >> M;
    std::vector<int64_t> A(M), B(M);
    REP(i, M)
    {
        std::cin >> A[i] >> B[i];
    }
    auto ans = solve(N, M, A, B);
    std::cout << ans << '\n';
    return 0;
}
