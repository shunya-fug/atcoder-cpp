#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <eigen3/Eigen/Dense>
using namespace Eigen;

double solve(const vector<vector<int>> &c)
{
    vector<int> P;
    REP(i, 9)
    {
        P.push_back(i);
    }

    auto all = 0, disappointed = 0;
    Matrix3i known;
    do
    {
        all++;
        known.setZero();
        REP(p, 9)
        {
            auto i = P[p] / 3, j = P[p] % 3;
            known(i, j) = 1;
            if (known.row(i).sum() == 3)
            {
                vector<int> ns;
                REP(_j, 3)
                {
                    if (_j != j)
                    {
                        ns.push_back(c[i][_j]);
                    }
                }
                if (ns[0] == ns[1])
                {
                    disappointed++;
                    break;
                }
            }
            if (known.col(j).sum() == 3)
            {
                vector<int> ns;
                REP(_i, 3)
                {
                    if (_i != i)
                    {
                        ns.push_back(c[_i][j]);
                    }
                }
                if (ns[0] == ns[1])
                {
                    disappointed++;
                    break;
                }
            }
            if (i == j and known(0, 0) == 1 and known(1, 1) == 1 and known(2, 2) == 1)
            {
                vector<int> ns;
                REP(k, 3)
                {
                    if (k != i)
                    {
                        ns.push_back(c[k][k]);
                    }
                }
                if (ns[0] == ns[1])
                {
                    disappointed++;
                    break;
                }
            }
            if (i + j == 2 and known(0, 2) == 1 and known(1, 1) == 1 and known(2, 0) == 1)
            {
                vector<int> ns;
                REP(_i, 3)
                {
                    if (_i != i)
                    {
                        ns.push_back(c[_i][2 - _i]);
                    }
                }
                if (ns[0] == ns[1])
                {
                    disappointed++;
                    break;
                }
            }
        }
    } while (next_permutation(ALL(P)));
    return 1e0 - (double)disappointed / all;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::vector<vector<int>> c(3, vector<int>(3));
    REP(i, 3)
    {
        REP(j, 3)
        {
            std::cin >> c[i][j];
        }
    }
    auto ans = solve(c);
    std::cout << std::setprecision(10) << ans << '\n';
    return 0;
}
