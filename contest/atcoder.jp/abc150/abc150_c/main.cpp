#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, const std::vector<int64_t> &P, const std::vector<int64_t> &Q)
{
    vector<int64_t> pattern(N);
    iota(ALL(pattern), 1);
    int64_t order = 1;
    vector<int64_t> ab;
    do
    {
        if (P == pattern or Q == pattern)
        {
            ab.push_back(order);
        }
        order++;
    } while (next_permutation(ALL(pattern)));
    return ab.size() == 1 ? 0 : abs(ab[0] - ab[1]);
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> P(N), Q(N);
    REP(i, N)
    {
        std::cin >> P[i];
    }
    REP(i, N)
    {
        std::cin >> Q[i];
    }
    auto ans = solve(N, P, Q);
    std::cout << ans << '\n';
    return 0;
}
