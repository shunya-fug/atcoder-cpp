#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int N, const std::vector<int64_t> &S, const std::vector<int64_t> &C)
{
    // slime[size] = count
    unordered_map<int64_t, int64_t> slime;
    priority_queue<int64_t, vector<int64_t>, greater<>> PQ;
    REP(i, N)
    {
        slime[S[i]] = C[i];
        PQ.push(S[i]);
    }

    while (!PQ.empty())
    {
        auto s = PQ.top();
        PQ.pop();
        if (slime[s] < 2)
        {
            continue;
        }
        if (!slime.contains(2 * s))
        {
            PQ.push(2 * s);
        }
        slime[2 * s] += slime[s] / 2;
        slime[s] %= 2;
    }

    int64_t ans = 0;
    for (auto c : slime | views::values)
    {
        ans += c;
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> S(N), C(N);
    REP(i, N)
    {
        std::cin >> S[i] >> C[i];
    }
    auto ans = solve(N, S, C);
    std::cout << ans << '\n';
    return 0;
}
