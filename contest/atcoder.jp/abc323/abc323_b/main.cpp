#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/algorithm/string/join.hpp>

std::vector<string> solve(int N, const std::vector<std::string> &S)
{
    vector<int> win(N);
    REP(i, N)
    {
        win[i] = ranges::count(S[i], 'o');
    }

    vector<int> ids(N);
    iota(ALL(ids), 0);
    ranges::stable_sort(ids, [&](auto a, auto b)
                        { return win[a] > win[b]; });

    vector<string> ans(N);
    REP(i, N)
    {
        ans[i] = to_string(ids[i] + 1);
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<std::string> S(N);
    REP(i, N)
    {
        std::cin >> S[i];
    }
    auto ans = solve(N, S);
    std::cout << boost::join(ans, " ") << '\n';
    return 0;
}
