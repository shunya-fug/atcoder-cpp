#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

vector<int64_t> solve(int N, int M, const std::vector<int64_t> &A, const std::vector<std::string> &S)
{
    // 初期スコア
    vector<int64_t> score(N);
    iota(ALL(score), 1L);
    REP(i, N)
    REP(j, M)
    {
        if (S[i][j] == 'o')
        {
            score[i] += A[j];
        }
    }
    int64_t highest = *ranges::max_element(score);

    // 得点が高い順に問題を並び替え
    vector<int> ids(M);
    iota(ALL(ids), 0);
    ranges::stable_sort(ids, [&](auto l, auto r)
                        { return A[l] > A[r]; });

    vector<int64_t> point(A.size());
    vector<string> solved(S.size(), string(S.front().size(), '-'));
    REP(i, ids.size())
    {
        point[i] = A[ids[i]];
    }
    REP(i, N)
    {
        REP(j, ids.size())
        {
            solved[i][j] = S[i][ids[j]];
        }
    }

    vector<int64_t> ans(N);
    REP(i, N)
    {
        if (score[i] == highest)
        {
            ans[i] = 0;
            continue;
        }

        REP(j, solved[i].size())
        {
            if (solved[i][j] == 'x')
            {
                ans[i]++;
                score[i] += point[j];
                if (score[i] > highest)
                {
                    break;
                }
            }
        }
    }

    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N, M;
    std::cin >> N >> M;
    std::vector<int64_t> A(M);
    std::vector<std::string> S(N);
    REP(i, M)
    {
        std::cin >> A[i];
    }
    REP(i, N)
    {
        std::cin >> S[i];
    }
    auto ans = solve(N, M, A, S);
    REP(i, N)
    {
        std::cout << ans[i] << '\n';
    }
    return 0;
}
