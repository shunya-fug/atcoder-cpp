#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

// 組み合わせの数nCrを計算
int64_t calcNumOfCombination(int64_t n, int64_t r)
{
    int64_t num = 1;
    for (int64_t i = 1; i <= r; i++)
    {
        num = num * (n - i + 1) / i;
    }
    return num;
}

vector<int64_t> solve(int N, const std::vector<int64_t> &A)
{
    vector<int64_t> ball_count(N + 1);
    REP(i, N)
    {
        ball_count[A[i]]++;
    }

    int64_t comb = 0;
    for (auto n : ball_count)
    {
        comb += calcNumOfCombination(n, 2);
    }

    vector<int64_t> ans(N);
    REP3(k, 1, N + 1)
    {
        ans[k - 1] = comb - (ball_count[A[k - 1]] < 2 ? 0 : calcNumOfCombination(ball_count[A[k - 1]], 2) - calcNumOfCombination(ball_count[A[k - 1]] - 1, 2));
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int N;
    std::cin >> N;
    std::vector<int64_t> A(N);
    REP(i, N)
    {
        std::cin >> A[i];
    }
    auto ans = solve(N, A);
    REP(i, N)
    {
        std::cout << ans[i] << '\n';
    }
    return 0;
}
