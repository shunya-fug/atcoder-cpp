#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <atcoder/modint.hpp>

using mint = atcoder::modint998244353;
int64_t solve(int64_t N, vector<int64_t> &A, vector<int64_t> &S)
{
    vector<int64_t> running_sum(ALL(S));
    REP(i, running_sum.size() - 1)
    {
        running_sum[i + 1] += running_sum[i];
    }
    mint ans = 0;
    int p = 0;
    unordered_set<int64_t> history;
    REP(i, N)
    {
        while (history.find(A[i]) != end(history))
        {
            history.erase(A[p]);
            p++;
        }
        history.insert(A[i]);
        ans += running_sum[i - p];
    }
    return ans.val();
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    cin >> N;
    vector<int64_t> A(N), S(N);
    REP(i, N)
    {
        cin >> A[i];
    }
    REP(i, N)
    {
        cin >> S[i];
    }
    auto ans = solve(N, A, S);
    std::cout << ans << '\n';
    return 0;
}
