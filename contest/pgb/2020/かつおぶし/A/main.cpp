#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;

int64_t solve(int64_t N, const vector<int64_t> &A, const vector<int64_t> &B)
{
    vector<vector<int64_t>> G(N + 1);
    REP(i, A.size())
    {
        G[A[i]].push_back(B[i]);
        G[B[i]].push_back(A[i]);
    }

    int64_t ans = 0;
    // {pre, from}
    queue<pair<int64_t, int64_t>> Q;
    Q.push({0, 1});
    while (!Q.empty())
    {
        auto [pre, from] = Q.front();
        Q.pop();
        int64_t n = 0;
        for (auto to : G[from])
        {
            if (to != pre)
            {
                Q.push({from, to});
                n++;
            }
        }
        if (n == 0)
        {
            ans++;
        }
    }
    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N;
    std::cin >> N;
    vector<int64_t> A(N - 1), B(N - 1);
    REP(i, A.size())
    {
        cin >> A[i] >> B[i];
    }
    auto ans = solve(N, A, B);
    std::cout << ans << '\n';
    return 0;
}
