#include <bits/stdc++.h>
#define REP(i, n) for (int i = 0; (i) < (int)(n); ++(i))
#define REP3(i, m, n) for (int i = (m); (i) < (int)(n); ++(i))
#define REP_R(i, n) for (int i = (int)(n)-1; (i) >= 0; --(i))
#define REP3R(i, m, n) for (int i = (int)(n)-1; (i) >= (int)(m); --(i))
#define ALL(x) ::std::begin(x), ::std::end(x)
using namespace std;
#include <boost/algorithm/string/join.hpp>

vector<string> solve(int64_t N, int64_t S)
{
    vector<string> ans;
    auto rec = [&](const auto &self, vector<int64_t> history, int64_t sum) -> void
    {
        if (sum > S)
        {
            return;
        }

        if ((int)history.size() == N)
        {
            if (sum == S)
            {
                vector<string> a(N);
                REP(i, a.size())
                {
                    a[i] = to_string(history[i]);
                }
                ans.push_back(boost::join(a, " "));
            }
            return;
        }

        if ((int)history.size() == N - 1)
        {
            auto last = S - sum;
            if (last >= history.back())
            {
                auto nh = history;
                nh.push_back(last);
                self(self, nh, sum + last);
            }
            return;
        }

        for (auto i = history.back(); i < S - sum; i++)
        {
            auto nh = history;
            nh.push_back(i);
            self(self, nh, sum + i);
        }
    };
    for (auto i = 1; i <= S; i++)
    {
        rec(rec, {i}, i);
    }

    return ans;
}

// generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
int main()
{
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    int64_t N, S;
    std::cin >> N >> S;
    for (auto ans : solve(N, S))
    {
        std::cout << ans << '\n';
    }
    return 0;
}
